.ns("frontend.components.pieces.dropdown", {
  .ui("dropdown", {
    // TODO: Inline, and use this component everywhere instead of this mixin.
    // See CIRCLE-101.
    .fancy-select(@arrow-margin: 6px; @color: inherit);

    width: 155px;
    height: 35px;
    padding: @padding-base-vertical @padding-base-horizontal;

    color: @grayDark;

    border: 1px solid @input-border;

    // Originally from Bootstrap:
    // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
    border-radius: @input-border-radius;


    // ------------------------------------------------------------------------
    // TODO: The rest of this component\'s stylesheet is declarations inlined
    // from Bootstrap which appear to affect the style of the component \(that
    // is, they're not overridden), but which aren\'t necessarily the styles we
    // want according to the style guide. This will be addressed further in
    // CIRCLE-101.

    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
    .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

    // Customize the `:focus` state to imitate native WebKit styles.
    .form-control-focus();

    // Placeholder
    .placeholder();

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don\'t honor that edge case; we style them as disabled anyway.
    &[disabled],
    &[readonly],
    fieldset[disabled] & {
      background-color: @input-bg-disabled;
      opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
    }
  });
});
